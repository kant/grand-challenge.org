version: '2.3'

services:

  postgres:
    image: postgres:10.4
    environment: &postgresenv
      POSTGRES_PASSWORD: secretpassword
      POSTGRES_USER: comic
      POSTGRES_DB: comic
    ports:
      - "5432:5432" # Only required for running django locally
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "comic"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  minio-private:
    # This is for private data, should not be exposed to the public
    image: minio/minio:RELEASE.2019-02-14T00-21-45Z
    environment: &minioenv
      MINIO_ACCESS_KEY: minioaccess
      MINIO_SECRET_KEY: minio12345
    expose:
      - 9000
    command: "server /data"
    volumes:
      - type: volume
        source: miniodata
        target: /data
    restart: always

  web:
    image: grandchallenge/web-test:latest
    environment:
      <<: *postgresenv
      <<: *minioenv
      GOOGLE_ANALYTICS_ID: UA-XXXXX-Y
    command: >-
      bash -c "
      python manage.py collectstatic --noinput
      && mkdir -p /dbox/Dropbox/media/
      && python manage.py migrate
      && python manage.py check_permissions
      && python manage.py initcomicdemo
      && gunicorn -w 1 -b 0.0.0.0 config.wsgi
      "
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      memcached:
        condition: service_started
    volumes:
      - type: volume
        source: static
        target: /static/
      - type: volume
        source: media
        target: /dbox/Dropbox/media/
      - type: bind
        source: ./app
        target: /app/
      # The docker socket is only needed for testing
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
    group_add:
      - 999 # The docker group is only needed for testing
    healthcheck:
      test: ["CMD-SHELL", "curl http://web:8000/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  http:
    image: grandchallenge/http:latest
    environment:
      - SERVER_NAME=gc.localhost
      - SENDFILE_STATUS=off
    command: >-
        bash -c "envsubst '$$SERVER_NAME $$SENDFILE_STATUS' < /tmp/nginx.conf.template > /etc/nginx/nginx.conf
        && openssl req -x509 -newkey rsa:4096 -keyout /etc/ssl/private/$$SERVER_NAME.key -out /etc/ssl/certs/$$SERVER_NAME.crt -days 365 -nodes -subj '/CN=$$SERVER_NAME'
        && nginx -g 'daemon off;'"
    restart: always
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      web:
        condition: service_healthy
    volumes:
      - type: volume
        source: static
        target: /srv/public/static
        read_only: true
      - type: volume
        source: media
        target: /dbox/Dropbox/media/
        read_only: true

  memcached:
    image: memcached:1.4
    restart: always

  redis:
    image: redis:4.0
    command: redis-server --appendonly yes
    restart: always
    ports:
      - "6379:6379" # Only required for running django locally

  celery_worker:
    image: grandchallenge/web-test:latest
    environment:
      <<: *postgresenv
      <<: *minioenv
    restart: always
    command: "celery -A config worker -l info -c 1"
    scale: 1
    depends_on:
      web:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes_from:
      - web

  celery_worker_evaluation:
    image: grandchallenge/web-test:latest
    environment:
      <<: *postgresenv
      <<: *minioenv
    restart: always
    command: "celery -A config worker -l info -Q evaluation -c 1"
    scale: 1
    depends_on:
      web:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes_from:
      - web
    volumes:
      # The docker socket is only needed for testing
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
    group_add:
      - 999

  celery_worker_gpu:
    image: grandchallenge/web-test:latest
    environment:
      <<: *postgresenv
      <<: *minioenv
    restart: always
    command: "celery -A config worker -l info -Q gpu -c 1"
    scale: 1
    depends_on:
      web:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes_from:
      - web

  celery_beat:
    image: grandchallenge/web-test:latest
    environment:
      <<: *postgresenv
    restart: always
    command: >-
        bash -c "
        rm -f /tmp/celerybeat.pid
        && celery -A config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler --pidfile=\"/tmp/celerybeat.pid\"
        "
    depends_on:
      web:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes_from:
      - web

  flower:
    image: crgwbr/docker-celery-flower
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_started
    restart: always

volumes:
  static:
  media:
  miniodata:
